package superman.core;


import superman.ui.MainForm;
import superman.vuls.EchoVul;
import superman.vuls.NoEchoVul;

import javax.swing.*;
import java.net.URL;

public class VulCheck extends Thread {

    @Override
    public void run() {
        MainForm.getMainForm().getCheckButton().setEnabled(false);
        check();
        MainForm.getMainForm().getCheckButton().setEnabled(true);
    }

    private void check() {
        String url = MainForm.getMainForm().getUrlTextField().getText().trim();
        String ip = "127.0.0.1";
        int port = 80;
        String protocol = "http";
        try {
            URL u = new URL(url);
            protocol = u.getProtocol().toLowerCase();
            ip = u.getHost();
            if (protocol.equals("https")) {
                port = 443;
            }
            if (u.getPort() != -1) {
                port = u.getPort();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "url不能为空", "提示", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String vulName= (String) MainForm.getMainForm().getVulComboBox().getSelectedItem();
        checkInit();
        if("ECHO_ALL".equals(vulName)){
            Log.info("===开始检查可回显漏洞===",true);
            for(String name: Store.ECHO_VUL_LIST.keySet()){
                Log.info("检查漏洞："+name+"开始");
                EchoVul vul= Store.ECHO_VUL_LIST.get(name);
                String result=vul.check(protocol,ip,port);
                if(result!=null){
                    Log.info("[+]漏洞："+name+"存在，返回信息："+result);
                    Store.ECHO_VUL=vul;
                    break;//检查到漏洞即刻停止
                }else{
                    Log.info("漏洞："+name+"不存在");
                }
                Log.info("检查漏洞："+name+"完成");
            }
            Log.info("===检查可回显漏洞完成===");
        }else if("NO_ECHO_ALL".equals(vulName)){
            Log.info("===开始检查不可回显漏洞(use dnslog)===",true);
            for(String name: Store.NO_ECHO_VUL_LIST.keySet()){
                Log.info("检查漏洞："+name+"开始");
                NoEchoVul vul= Store.NO_ECHO_VUL_LIST.get(name);
                String result=vul.check(protocol,ip,port);
                if(result!=null){
                    Log.info("[+]漏洞："+name+"存在，返回信息："+result);
                    Store.NO_ECHO_VUL=vul;
                    break;//检查到漏洞即刻停止
                }else{
                    Log.info("漏洞："+name+"不存在");
                }
                Log.info("检查漏洞："+name+"完成");
            }
            Log.info("===检查不可回显漏洞完成===");
        }else{
            for(String name: Store.ECHO_VUL_LIST.keySet()){
                if(name.equals(vulName)){
                    Log.info("===检查漏洞："+name+"开始===",true);
                    EchoVul vul= Store.ECHO_VUL_LIST.get(name);
                    String result=vul.check(protocol,ip,port);
                    if(result!=null){
                        Log.info("[+]漏洞："+name+"存在，返回信息："+result);
                        Store.ECHO_VUL=vul;
                    }else{
                        Log.info("漏洞："+name+"不存在");
                    }
                    Log.info("===检查漏洞："+name+"完成===");
                    return;
                }
            }
            for(String name: Store.NO_ECHO_VUL_LIST.keySet()){
                if(name.equals(vulName)){
                    Log.info("===检查漏洞："+name+"开始===",true);
                    NoEchoVul vul= Store.NO_ECHO_VUL_LIST.get(name);
                    String result=vul.check(protocol,ip,port);
                    if(result!=null){
                        Log.info("[+]漏洞："+name+"存在，返回信息："+result);
                        Store.NO_ECHO_VUL=vul;
                    }else{
                        Log.info("漏洞："+name+"不存在");
                    }
                    Log.info("===检查漏洞："+name+"完成===");
                    return;
                }
            }
        }
    }

    private void checkInit() {
        if(Store.ECHO_VUL !=null){
            Store.ECHO_VUL.remove();//先删除原来的shell
            Store.ECHO_VUL =null;
        }
        Store.NO_ECHO_VUL=null;
    }

}

