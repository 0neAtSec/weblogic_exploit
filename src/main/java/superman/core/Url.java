package superman.core;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Url {
    private String protocol;
    private String host;
    private int port;
    private String path;

    public Url(String url) throws Exception {
        Pattern p = Pattern.compile("^([A-Za-z]+)://(.+):([0-9]+)(/(.+))*$");
        Matcher m = p.matcher(url);
        if(m.matches()){
            protocol=m.group(1).toLowerCase();
            host=m.group(2);
            port=Integer.parseInt(m.group(3));
            path=m.group(4);
        }else{
            p = Pattern.compile("^([A-Za-z]+)://(.+)(/(.+))*$");
            m = p.matcher(url);
            if(m.matches()){
                protocol=m.group(1).toLowerCase();
                host=m.group(2);
                if ("http".equals(protocol)) {
                    port = 80;
                    port = 443;
                    port = 1099;
                } else if ("https".equals(protocol)) {
                    port = 443;
                    port = 1099;
                } else if ("rmi".equals(protocol)) {
                    port = 1099;
                }
                path=m.group(3);
            }else {
                throw new Exception("url错误");
            }
        }
    }

    public String getProtocol() {
        return protocol;
    }

    public void setProtocol(String protocol) {
        this.protocol = protocol;
    }

    public String getHost() {
        return host;
    }

    public void setHost(String host) {
        this.host = host;
    }

    public int getPort() {
        return port;
    }

    public void setPort(int port) {
        this.port = port;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    @Override
    public String toString() {
        if(path==null){
            return String.format("%s://%s:%s",protocol,host,port);
        }
        return String.format("%s://%s:%s%s",protocol,host,port,path);
    }
}
